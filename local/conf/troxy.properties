################################################################################
# Troxy configuration.
# These settings are only read when Troxy starts.
# Some of the settings may be changed live using the REST API "/api/status".
################################################################################

################################################################################
# General.

# Troxy mode. Valid values:
# PLAYBACK, RECORD, PLAYBACK_OR_RECORD, PASSTHROUGH, PLAYBACK_OR_PASSTHROUGH
troxy.mode=PLAYBACK

# Whether to allow response to be returned when multiple recordings match the
# request. Multiple recordings matching a request should in general be
# considered an error, hence the default value of this setting is "false".
# When set to "true", the recording with the longest combined regular
# expressions from the eight request fields will be returned as this is assumed
# to be the most unique recording.
# When left at "false" a 418 error response is returned to alert the user about
# multiple recordings matching the request.
troxy.allow_multiple_matching_recordings=false

################################################################################
# REST API

# Enable/Disable the REST API. Default is enabled
troxy.restapi.enabled=true

# List of hostnames to restrict where REST API is served. -If omitted or empty,
# serve REST API on all hostnames. -This setting is useful for performance reasons
# and in cases where the mocked system API overlaps with REST API (/api/*)
# Valid values: comma-separated list; ex. localhost,troxy.test.acme.com
troxy.restapi.hostnames=

################################################################################
# Statistics.

# Interval between each statistics gathering in minutes.
# This is relative to the start of epoch (1970-01-01 00:00:00), meaning a value
# of 15 will cause statistics to be gathered at xx:00, xx:15, xx:30 and xx:45.
# To disable statistics, set interval to 0 or a negative number.
statistics.interval=60


################################################################################
# HTTP/HTTPS ingress settings (traffic terminated by troxy).

http.port=8080
#https.port=443
#https.keystore.file=/opt/certs/identitystore.jks
#https.keystore.type=JKS
#https.keystore.password=PASSWORD
#https.keystore.alias.key=identity
#https.keystore.alias.password=PASSWORD

################################################################################
# HTTP/HTTPS egress settings (traffic originated/proxied from troxy).

egress.https.keystore.file=
#egress.https.keystore.type=PKCS12
#egress.https.keystore.password=PASSWORD
#egress.https.keystore.alias.key=identity
#egress.https.keystore.alias.password=PASSWORD

# Force http requests to be proxied using https. -Default is false; proxy requests
# using the incoming protocol (ex. http->http, https->https)
egress.https.force=false


################################################################################
# Filters.
# Configuration of filters uses this structure ([] = optional, <> = mandatory):
# filter.<name>[.group].<type>.<field>[.id]=<value>
# name:  Name of the filter, this matches the name of the filter class.
# group: Unique name for grouping configuration.
# type:  Either "enabled", "config", "request" or "response".
# field: Depends on value of <type>:
#        "enabled":  Neither <field> nor <id> is used, see note below.
#        "config":   Refer to documentation for given filter for valid fields.
#        "request":  Valid values: "protocol", "host", "port", "path", "query",
#                                  "method", "header" or "content"
#        "response": Valid values: "code", "header" or "content"
# id:    Unique ID for field, mainly used for "request" and "response", but a
#        filter may have multiple levels in "config", check filter documentation.
#
# Note:
# There's one exception to the structure:
# Filters are enabled/disabled with "filter.<name>.enabled=<true/false>".
# When <type> is set to <enabled>, then neither <field> nor <id> can follow, and
# <group> must not be set.
#
# Filters supplied with Troxy:
# DelayResponse:    Delay responses with a configured delay strategy.
#                   Valid config values: "delay"
#
# SetRecordingDelay: Automatically set delay when creating new recordings.
#                    Valid config values: delay_strategy, min_multiplier,
#                                         max_multiplier, mean_multiplier
#
# AutoRegexNewRecording:     Automatically replace substrings matching a regex
#                            with the regex itself.
#                            See example below for details on usage.
#
# KeyBasedReplace:           Search request for keys that is mapped in a file
#                            with values to be inserted in the response.
#
#-------------------------------------------------------------------------------
#
# Filter DelayResponse
#
# This filter will override any delay configured in the recording, assuming that
# the recording match the global or a group configuration for this filter
# specified below.
#
# Valid delay strategies and their parameters:
# - NONE
# - FIXED;<time>
# - RANDOM;<min>;<max>
# - NORMAL;<min>;<max>
# - EXPONENTIAL;<min>;<mean>;<max>
#
# Enable DelayResponse filter:
#filter.DelayResponse.enabled=true
#
# Set global filter configuration.
# These settings will not be "inherited" by groups, the settings will be used
# when a request doesn't match the rules of a group, but do match the rules in
# the global configuration.
# Set that only requests which go to "my<digits>.example.com" should be delayed:
#filter.DelayResponse.request.host=my\d+.example.com
# Set the global configuration values:
#filter.DelayResponse.config.delay=EXPONENTIAL;1000;1500;2000
#
# Set group matching rules.
# Since settings are not inherited from the global filter configuration, we have
# to repeat them.
# Set that only requests which go to "my<digits>.example.com" should be delayed,
# and that the request header must contain "findCustomers" or "findEmployees":
#filter.DelayResponse.group1.request.host=my\d+.example.com
#filter.DelayResponse.group1.request.header.id1=.*findCustomers.*
#filter.DelayResponse.group1.request.header.id2=.*findEmployees.*
# Set the group specific configuration values:
#filter.DelayResponse.group1.config.delay=EXPONENTIAL;2000;2500;3000
#
# With the above example:
# - Requests to "nodelay.example.com" will not be delayed, because the host does
#   not match "my\d+.example.com".
# - Requests to "my1.example.com" without "findCustomers" or "findEmployees" in
#   the header will be delayed 1000-2000ms, because they match the global
#   configuration for the DelayResponse filter.
# - Requests to "my1.example.com" with "findCustomers" or "findEmployees" in the
#   header will be delayed between 2000-3000ms, because the rules for "group1"
#   matches these values.
#
#-------------------------------------------------------------------------------
#
# Filter SetRecordingDelay
#
# This filter will automatically set a delay for newly created recordings based
# on the time it took to receive a response from the backend server when
# creating the recording.
#
# Valid delay_strategy values:
# - NONE
# - FIXED
# - RANDOM
# - NORMAL
# - EXPONENTIAL
#
#
# Set global configuration. Do note that this filter does not use any regular
# expressions or groups, when this filter is enabled all new recordings created
# will have the delay strategy and delay values set from these settings.
filter.SetRecordingDelay.enabled=false
filter.SetRecordingDelay.config.delay_strategy=EXPONENTIAL
filter.SetRecordingDelay.config.min_multiplier=0.8
filter.SetRecordingDelay.config.mean_multiplier=1.0
filter.SetRecordingDelay.config.max_multiplier=5.0
#
#-------------------------------------------------------------------------------
#
# Filter AutoRegexNewRecording
#
# When a new recording is made it will search for substrings matching the
# regular expressions configured below in the various field of a request and/or
# response, and replace the matched text with the regular expression or an
# optionally supplied replacement pattern. The replacement pattern may use back
# references with e.g. "$1", "$2", etc.
# The format is "<regular expression>[;<replacement pattern>]", similar to
# Perl regex search & replace: s;<search>;<replace>
# When specifying regular expressions for the response fields you should always
# specify a replacement value (it usually does not make sense to add regular
# expressions to response fields).
#
# Config for filter is "filter.AutoRegexNewRecording.config" followed by:
# Request fields: protocol, host, port, path, query, method, header, content
# Response fields: response_code, response_header, response_content
#
# Some examples:
# - ".*"
#   This will match everything and replace it with regex ".*".
# - ".*;Hello World!"
#   This will match everything and replace it with text "Hello World!".
# - ".*action>([^<]*)</action.*;.*action>$1</action.*"
#   This will search for ".*action>([^<]*)</action.*", and if found, replace it
#   with ".*action>$1</action.*", where "$1" will be the actual value found in
#   the first group (e.g. "([^<]*)") in the search regex.
#
# Caveats:
# - A literal "$" followed by a digit in replacement pattern is currently not
#   properly supported (you can not escape the "$" with backslash).
#   A literal "$" that isn't followed by a digit may however be used.
# - Be careful with greedy regular expressions such as ".*". Such expressions
#   may span more text than you intended to and affect other regular
#   expressions you've set up for the field.
#
# Enable filter
filter.AutoRegexNewRecording.enabled=true
#
# Filter configuration
#filter.AutoRegexNewRecording.config.protocol.protocol=^https?$
filter.AutoRegexNewRecording.config.host.host=.*
#filter.AutoRegexNewRecording.config.port.port=.*
#filter.AutoRegexNewRecording.config.path.path=.*
#filter.AutoRegexNewRecording.config.query.query=.*
#filter.AutoRegexNewRecording.config.method.method=.*
filter.AutoRegexNewRecording.config.header.accept=Accept: [^\\n]*
filter.AutoRegexNewRecording.config.header.accept_charset=Accept-Charset: [^\\n]*
filter.AutoRegexNewRecording.config.header.accept_language=Accept-Language: [^\\n]*
filter.AutoRegexNewRecording.config.header.authorization=Authorization: [^\\n]*
filter.AutoRegexNewRecording.config.header.cache_control=Cache-Control: [^\\n]*
filter.AutoRegexNewRecording.config.header.connection=Connection: [^\\n]*
filter.AutoRegexNewRecording.config.header.content_length=Content-Length: [^\\n]*
filter.AutoRegexNewRecording.config.header.content_type=Content-Type: [^\\n]*
filter.AutoRegexNewRecording.config.header.cookie=Cookie: [^\\n]*
filter.AutoRegexNewRecording.config.header.host=Host: [^\\n]*
filter.AutoRegexNewRecording.config.header.pragma=Pragma: [^\\n]*
filter.AutoRegexNewRecording.config.header.user_agent=User-Agent: [^\\n]*


#-------------------------------------------------------------------------------
#
# Filter KeepRegexNewRecording
#
# When a new recording is made it will search for substrings matching the
# regular expressions configured below in the various field of a request, and
# kepp the matched text.
# The regular expressions given should only match exactly what you want to keep.
#
# Sample below will result in a content filter depending on fields in original request
# ^.*Function>PaymentGetPaymentStatus</.*>true<.*>true<.*>false<.*$
#
# Enable filter
filter.KeepRegexNewRecording.enabled=false
#
# Filter configuration
filter.KeepRegexNewRecording.config.content.function=Function>[^<]*?</
filter.KeepRegexNewRecording.config.content.true=>true<
filter.KeepRegexNewRecording.config.content.false=>false<
#
#-------------------------------------------------------------------------------
#
# Filter KeyBasedReplace
#
# A filter that use a regex to search for a key that is later looked up in a
# file that maps the key to values (comma-separated file). The values can then
# be inserted into the response.
# The first entry per line in the mapping file is the key, the subsequent
# entries are the values.
# The typical use case for this is replacing i.e. an account number in the
# response when the user ID change.
#
# Enable filter
#filter.KeyBasedReplace.enabled=true
#
# Filter configuration
# The path to the mapping file is specified with this config setting.
# The mapping file is a comma separated file, where for each line, the first
# entry is the key, followed by value 1, value 2, value 3, ...
#filter.KeyBasedReplace.config.mapping_file=mapping.csv

# The key is extracted from the request using a regular expression. The regex
# is looked up in the content, header, query and path fields, where the former
# takes precedence over the later.
# If there are no groups in the regex, the entire regex is assumed to match the
# key we wish to extract.
#filter.KeyBasedReplace.config.key=\\d+
# If there's one group in the regex, then that group is assumed to be the key.
#filter.KeyBasedReplace.config.key=<ssn>(\\d+)</ssn>
# If there are more than one group, you need to name a group "key" for the
# filter to know which group that is the key.
#filter.KeyBasedReplace.config.key=<(ssn|fnr)>(?<key>\\d+)</(ssn|fnr)>

# A "replace" regex search the response (code, header and content) for matching
# text, and the matching text is replaced with the value in the mapping file
# for the previously found key. The part of the regex you wish to replace with
# a mapping value you turn into a named group, starting with "v" and ending
# with the value index.
# Do note that the first value ("v1") is the second entry in the mapping file,
# this is because the first entry is the key.
# For example, if the regex found "12345678901" (this will be the key) and the
# mapping file contains the line "12345678901,123,456", then the value "123"
# will be inserted in between the "account" tags in the following example:
#filter.KeyBasedReplace.config.replace=<account>(?<v1>.*)</account>
# You can have multiple replace regexes, but they must have unique config names
# and begin with "replace.", for example:
#filter.KeyBasedReplace.config.replace.ssn=<ssn>(?<v1>\\d+)</ssn>
#filter.KeyBasedReplace.config.replace.card=<card>(?<v2>.*)</card>


# Filter FunctionReplace
# A filter that replaces keys (pure text in the Troxy response) with a supported function. Keys are replaced in both the response body and header in the recorded Troxy response. More supported functions may be added at a later time.
#
# Supported functions are
# now (now replaces a specified key with a timestamp on a specified format.The function uses LocalDateTime.now().format(DATEFORMAT) so your provided format must be compatible. Key and Format should be separated by the character ;. If no separator is specified then format yyyy-MM-dd'T'HH:mm:ss.SSS will be used)
# The filter also supports offset time in format 11y = 11years, -13M = 13 months back in time, 14d = 14 days, 15H = 15 hours, 16m = 16 minutes, -12s = 12 seconds back in time

# Example config
# filter.FunctionReplace.config.now.KEY=KEYTOREPLACEINRESPONSE;DATEFORMAT;OFFSET
# filter.FunctionReplace.config.now.timestamp=TIMESTAMPTOREPLACE;yyyy-MM-dd'T'HH:mm:ss.SSS
# filter.FunctionReplace.config.now.othertimestamp=ANOTHERTIMESTAMPTOREPLACE;YYmmdd'T'HH:MM:ss
# filter.FunctionReplace.config.now.timestampnoseparator=TIMESTAMPTOREPLACEWITHOUTSEPARATOR
# filter.FunctionReplace.config.now.addhours=TIMESTAMPTOREPLACE;yyyy-MM-dd'T'HH:mm:ss.SSS;23H
# filter.FunctionReplace.config.now.substractyears=TIMESTAMPTOREPLACE;yyyy-MM-dd'T'HH:mm:ss.SSS;-23y

filter.FunctionReplace.enabled=false
filter.FunctionReplace.config.now.logintimestamp=TIMESTAMPTOREPLACE;yyyy-MM-dd'T'HH:mm:ss.SSS


